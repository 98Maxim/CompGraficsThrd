#pragma once

namespace paint {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Сводка для Form1
	/// </summary>
	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
			//
			//TODO: добавьте код конструктора
			//
		}

	protected:
		/// <summary>
		/// Освободить все используемые ресурсы.
		/// </summary>
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}

	private:
		float left, right, top, bottom;
		float Wcx, Wcy, Wx, Wy;
		float Vcx, Vcy, Vx, Vy;
		System::Collections::Generic::List<polygon^> polygons;
		System::Collections::Generic::List<Color> colors;
	private: System::Windows::Forms::OpenFileDialog^  openFileDialog;

protected: 
	private: System::Windows::Forms::Button^  btnOpen;


	private:
		/// <summary>
		/// Требуется переменная конструктора.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Обязательный метод для поддержки конструктора - не изменяйте
		/// содержимое данного метода при помощи редактора кода.
		/// </summary>
		void InitializeComponent(void)
		{
			this->openFileDialog = (gcnew System::Windows::Forms::OpenFileDialog());
			this->btnOpen = (gcnew System::Windows::Forms::Button());
			this->SuspendLayout();
			// 
			// openFileDialog
			// 
			this->openFileDialog->DefaultExt = L"txt";
			this->openFileDialog->FileName = L"openFileDialog1";
			this->openFileDialog->Filter = L"Текстовые файлы (*.txt)|*txt|Все файлы(*.*)|*.*";
			this->openFileDialog->Title = L"Открыть файл";
			// 
			// btnOpen
			// 
			this->btnOpen->Anchor = static_cast<System::Windows::Forms::AnchorStyles>((System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right));
			this->btnOpen->Location = System::Drawing::Point(933, 0);
			this->btnOpen->Name = L"btnOpen";
			this->btnOpen->Size = System::Drawing::Size(75, 23);
			this->btnOpen->TabIndex = 0;
			this->btnOpen->Text = L"Открыть";
			this->btnOpen->UseVisualStyleBackColor = true;
			this->btnOpen->Click += gcnew System::EventHandler(this, &Form1::btnOpen_Click);
			// 
			// Form1
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(1008, 729);
			this->Controls->Add(this->btnOpen);
			this->KeyPreview = true;
			this->MinimumSize = System::Drawing::Size(424, 368);
			this->Name = L"Form1";
			this->Text = L"Form1";
			this->Load += gcnew System::EventHandler(this, &Form1::Form1_Load);
			this->Paint += gcnew System::Windows::Forms::PaintEventHandler(this, &Form1::Form1_Paint);
			this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &Form1::Form1_KeyDown);
			this->Resize += gcnew System::EventHandler(this, &Form1::Form1_Resize);
			this->ResumeLayout(false);

		}
#pragma endregion
	private: System::Void Form1_Load(System::Object^  sender, System::EventArgs^  e) {
				 polygons.Clear();
				 colors.Clear();
				 unit(T);

				 left = 112; right = 112; 
				 top = 84; bottom = 84;     

				 Wcx = left;
				 Wcy = Form::ClientRectangle.Height - bottom;
				 Wx = Form::ClientRectangle.Width - left - right;
				 Wy = Form::ClientRectangle.Height - top - bottom;
			 }

	private: System::Void btnOpen_Click(System::Object^  sender, System::EventArgs^  e) {
				 if (this->openFileDialog->ShowDialog() == System::Windows::Forms::DialogResult::OK) {
					 wchar_t fileName[1024];

					 for (int i = 0; i < openFileDialog->FileName->Length; i++)
						 fileName[i] = openFileDialog->FileName[i];

					 fileName[openFileDialog->FileName->Length] = '\0';

					 std::ifstream in;
					 in.open(fileName);

					 if (in.is_open() ) {
						 colors.Clear();
						 polygons.Clear();
						 unit(T);

						 std::string str;
						 getline(in, str);

						 while (in) {
							 if ((str.find_first_not_of(" \t\r\n") != std::string::npos) && (str[0] != '#')) {
								 std::stringstream s(str);
								 std::string cmd;

								 s >> cmd;

								 if (cmd == "frame") {
									 float newVcx, newVcy, newVx, newVy;
									 s >>  newVcx >> newVcy >> newVx >> newVy;

									 Vcx = newVcx; 
									 Vcy = newVcy;
									 Vx = newVx;
									 Vy = newVy;

									 frame (Vx, Vy, Vcx, Vcy, Wx, Wy, Wcx, Wcy, T);
								 }
								 if (cmd == "polygon") {
									 int numpoint;
									 s >> numpoint;

									 polygon^ P = gcnew polygon(0);
									 for (int i = 0; i < numpoint; i++) {
										 point p;
										 s >> p.x >> p.y;
										 P->Add(p);
									 }

									 polygons.Add(P);
								 }
								 if (cmd == "color") {
									 int R, G, B;
									 s >> R >> G >> B;

									 System::Drawing::Color Fill = Color::FromArgb(R, G, B);
									 colors.Add(Fill);
								 }
							 }
							 getline (in, str);
						 }
					 }
					 this->Refresh();
				 }
			 }

	private: System::Void Form1_Paint(System::Object^  sender, System::Windows::Forms::PaintEventArgs^  e) {
				 Bitmap^ image1 = gcnew Bitmap(this->ClientRectangle.Width, this->ClientRectangle.Height);
				 Graphics^ g = Graphics::FromImage(image1);

				 System::Drawing::Pen^ rectPen = gcnew Pen(Color::Red, 1);
				 Rectangle rect = System::Drawing::Rectangle((int)Wcx, (int)top, (int)Wx, (int)Wy);
				 g->DrawRectangle(rectPen, rect);
				 //g->Clip = gcnew System::Drawing::Region(rect);

				 System::Drawing::Pen^ blackPen = gcnew Pen(Color::Black, 0.5);

				 point Pmin;
				 Pmin.x = Wcx;
				 Pmin.y = Wcy - Wy;

				 point Pmax;
				 Pmax.x = Wcx + Wx;
				 Pmax.y = Wcy;

				 System::Drawing::Color Cgr = Color::Black;
				 for (int i = 0; i < polygons.Count; i++) {
					 polygon^ p = polygons[i];
					 polygon^ newp = gcnew polygon(0);

					 point a, b, c;
					 vec A, B, A1, B1;
					 point2vec(p[p -> Count - 1], A);
					 timesMatVec(T, A, A1);
					 vec2point(A1, a);

					 newp->Add(a);

					 for (int j = 0; j < p->Count; j++) { 
						 point2vec(p[j], B); 
						 timesMatVec(T, B, B1); 
						 vec2point(B1, b);

						 newp->Add(b);
					 }

					 p = PClip(newp, Pmin, Pmax);

					 for (int k = 0; k < p->Count - 1; k++) {
						 g->DrawLine(blackPen, p[k].x, p[k].y, p[k + 1].x, p[k + 1].y);	
					 }

					 if (p->Count != 0)
						 g->DrawLine(blackPen, p[p->Count - 1].x, p[p->Count - 1].y, p[0].x, p[0].y);

					 PFill(p, image1, Cgr, colors[i]);
				 }

				 g = e->Graphics;
				 g->DrawImage(image1, 0, 0);
				 delete image1;
			 }

	private: System::Void Form1_KeyDown(System::Object^  sender, System::Windows::Forms::KeyEventArgs^  e) {
				 mat R, T1;
				 Rectangle rect = Form::ClientRectangle;

				 switch(e->KeyCode) {
				 case Keys::W :
					 move(0, -1, R);
					 break;
				 case Keys::A :
					 move(-1, 0, R);
					 break;
				 case Keys::S :
					 move(0, 1, R);
					 break;
				 case Keys::D :
					 move(1, 0, R);
					 break;
				 case Keys::E :
					 rotateCentre(Wcy - Wy, Wcx, (float)0.05, R);
					 break;
				 case Keys::X :
					 scaleCentre(Wcy - Wy, Wcx, (float)1.1, R);
					 break;
				 case Keys::Z :
					 rotateCentre(Wcy - Wy, Wcx, (float)-0.05, R);
					 break;
				 case Keys::Q :
					 scaleCentre(Wcy - Wy, Wcx, (float)(1/1.1), R);
					 break;
				 case Keys::I :
					 move(0, -10, R);
					 break;
				 case Keys::O :
					 move(-10, 0, R);
					 break;
				 case Keys::K :
					 move(0, 10, R);
					 break;
				 case Keys::L :
					 move(10, 0, R);
					 break;
				 case Keys::U :
					 mirrorCentreVertical(rect.Height, R);
					 break;
				 case Keys::J :
					 mirrorCentreHorizontal(rect.Width, R);
					 break;
				 case Keys::C :
					 rotateCentre((float)(rect.Height / 2), (float)(rect.Width / 2), (float)-0.05, R);
					 break;
				 case Keys::V :
					 rotateCentre((float)(rect.Height / 2), (float)(rect.Width / 2), (float)0.05, R);
					 break;
				 case Keys::R :
					 scaleCentre((float)(rect.Height / 2), (float)(rect.Width / 2), (float)(1/1.1), R);
					 break;
				 case Keys::Y :
					 scaleCentre((float)(rect.Height / 2), (float)(rect.Width / 2), (float)1.1, R);
					 break;
				 case Keys::T :
					 scaleCentreVertical(rect.Height/2, (float)(1/1.1), R);
					 break;
				 case Keys::G :
					 scaleCentreVertical(rect.Height/2, (float)1.1, R);
					 break;
				 case Keys::F :
					 scaleCentreHorizontal(rect.Width/2, (float)(1/1.1), R);
					 break;
				 case Keys::H :
					 scaleCentreHorizontal(rect.Width/2, (float)1.1, R);
					 break;
				 case Keys::Escape :
					 unit(R);
					 frame(Vx, Vy, Vcx, Vcy, Wx, Wy, Wcx, Wcy, T);
					 break;
				 default :
					 unit(R);
				 }
				 times(R, T, T1);
				 set(T1, T);
				 this->Refresh();
			 }

	private: System::Void Form1_Resize(System::Object^  sender, System::EventArgs^  e) {
				 float oldWx = Wx;
				 float oldWy = Wy;
				 mat R, T1;

				 Wcx = left;
				 Wcy = Form::ClientRectangle.Height - bottom;
				 Wx = Form::ClientRectangle.Width - left - right;
				 Wy = Form::ClientRectangle.Height - top - bottom;

				 scaleProp(Wcx, top, (float)(Wx / oldWx), (float)(Wy / oldWy), R);
				 times(R, T, T1);
				 set(T1, T);

				 this->Refresh();
			 }
	};
}
